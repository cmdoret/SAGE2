library(VennDiagram)
install.packages("VennDiagram")
filepath <- './data/gene_sets/H_genes.txt'
annotable <- read.table("./data/all_strains_annot.tsv",header=T)  #Loading annotation table
annotable <- read.table("../data/all_strains_annot.tsv",header=T)  #Loading annotation table
annotable <- read.table("./data/all_strains_annot.tsv",header=T)  #Loading annotation table
annotable <- read.table("../data/all_strains_annot.tsv",header=T)  #Loading annotation table
con  <- file(filepath, open = "r")  # Opening connection to input file
filepath <- '../data/gene_sets/H_genes.txt'
out_table <- data.frame(annotation=NA)  # initiating annotation table
while (length(oneLine <- readLines(con, n = 1,encoding = 'UTF-8', warn = FALSE)) > 0) {
# Reading input file line by line
gene_fam <- unlist(strsplit(oneLine, "\t"))  # Splitting gene family (line) into strain|gene doublets
genfamfunc <- c()  # (Re)initializing list of functions found in the gene family
print('=======')
for(d in gene_fam){
# Iterating over strain|gene doublets
gene <- strsplit(d, split = "|",fixed = T)[[1]][2]
# Excluding strain name
gene <- paste('fig',gene,sep='|')
# Appending 'fig|' at the begining of the gene name to match annotation table format
tmp_genfunc <- as.character(annotable$function.[annotable$feature_id==gene])
# extracting function of corresponding gene in annotation table
genfamfunc[tmp_genfunc] <- ifelse(test = is.numeric(genfamfunc[tmp_genfunc]),
yes = genfamfunc[tmp_genfunc]+1,
no = 1)
# Incrementing number of occurence of current function in gene family by 1 (setting to 1 if never seen)
}
tmp_gene <- ifelse(length(genfamfunc) > 0, names(genfamfunc[which(genfamfunc==max(genfamfunc))]), NA)
# If there was no function, returning NA, otherwise returning most frequent function
out_table <- rbind(out_table,tmp_gene)  # Adding most frequent function in gene family to output table
}
close(con)  # Closing file connection
con  <- file(filepath, open = "r")  # Opening connection to input file
out_table <- data.frame(annotation=NA)  # initiating annotation table
while (length(oneLine <- readLines(con, n = 1,encoding = 'UTF-8', warn = FALSE)) > 0) {
# Reading input file line by line
gene_fam <- unlist(strsplit(oneLine, "\t"))  # Splitting gene family (line) into strain|gene doublets
genfamfunc <- c()  # (Re)initializing list of functions found in the gene family
print('=======')
for(d in gene_fam){
# Iterating over strain|gene doublets
gene <- strsplit(d, split = "|",fixed = T)[[1]][2]
# Excluding strain name
gene <- paste('fig',gene,sep='|')
# Appending 'fig|' at the begining of the gene name to match annotation table format
tmp_genfunc <- as.character(annotable$function.[annotable$feature_id==gene])
# extracting function of corresponding gene in annotation table
genfamfunc[tmp_genfunc] <- ifelse(test = is.numeric(genfamfunc[tmp_genfunc]),
yes = genfamfunc[tmp_genfunc]+1,
no = 1)
# Incrementing number of occurence of current function in gene family by 1 (setting to 1 if never seen)
}
tmp_gene <- ifelse(length(genfamfunc) > 0, names(genfamfunc[which(genfamfunc==max(genfamfunc))]), NA)
# If there was no function, returning NA, otherwise returning most frequent function
out_table <- rbind(out_table,tmp_gene)  # Adding most frequent function in gene family to output table
}
close(con)  # Closing file connection
View(out_table)
View(out_table)
out_table <- out_table[-1,]  # Removing first row containing NAs (used to initiate dataframe)
con  <- file(filepath, open = "r")  # Opening connection to input file
##############
# Processing #
##############
out_table <- data.frame(annotation=NA)  # initiating annotation table
while (length(oneLine <- readLines(con, n = 1,encoding = 'UTF-8', warn = FALSE)) > 0) {
# Reading input file line by line
gene_fam <- unlist(strsplit(oneLine, "\t"))  # Splitting gene family (line) into strain|gene doublets
genfamfunc <- c()  # (Re)initializing list of functions found in the gene family
for(d in gene_fam){
# Iterating over strain|gene doublets
gene <- strsplit(d, split = "|",fixed = T)[[1]][2]
# Excluding strain name
gene <- paste('fig',gene,sep='|')
# Appending 'fig|' at the begining of the gene name to match annotation table format
tmp_genfunc <- as.character(annotable$function.[annotable$feature_id==gene])
# extracting function of corresponding gene in annotation table
genfamfunc[tmp_genfunc] <- ifelse(test = is.numeric(genfamfunc[tmp_genfunc]),
yes = genfamfunc[tmp_genfunc]+1,
no = 1)
# Incrementing number of occurence of current function in gene family by 1 (setting to 1 if never seen)
}
tmp_gene <- ifelse(length(genfamfunc) > 0, names(genfamfunc[which(genfamfunc==max(genfamfunc))]), NA)
# If there was no function, returning NA, otherwise returning most frequent function
out_table <- rbind(out_table,tmp_gene)  # Adding most frequent function in gene family to output table
}
close(con)  # Closing file connection
out_table[-1,]
out_table[-1]
out_table$annotation[-1]
str(out_table$annotation[-1])
na.omit(out_table$annotation)
out_table[na.omit(out_table$annotation),]
out_table[!na.omit(out_table$annotation),]
out_table[!is.na(out_table$annotation),]
str(out_table[!is.na(out_table$annotation),])
basename(filepath)
strsplit(basename(filepath),"_")[[1]][1]
?write
filepath <- '../data/gene_sets/B_core_set.txt'
annotable <- read.table("../data/all_strains_annot.tsv",header=T)  #Loading annotation table
con  <- file(filepath, open = "r")  # Opening connection to input file
out_table <- data.frame(annotation=NA)  # initiating annotation table
while (length(oneLine <- readLines(con, n = 1,encoding = 'UTF-8', warn = FALSE)) > 0) {
# Reading input file line by line
gene_fam <- unlist(strsplit(oneLine, "\t"))  # Splitting gene family (line) into strain|gene doublets
genfamfunc <- c()  # (Re)initializing list of functions found in the gene family
for(d in gene_fam){
# Iterating over strain|gene doublets
gene <- strsplit(d, split = "|",fixed = T)[[1]][2]
# Excluding strain name
gene <- paste('fig',gene,sep='|')
# Appending 'fig|' at the begining of the gene name to match annotation table format
tmp_genfunc <- as.character(annotable$function.[annotable$feature_id==gene])
# extracting function of corresponding gene in annotation table
genfamfunc[tmp_genfunc] <- ifelse(test = is.numeric(genfamfunc[tmp_genfunc]),
yes = genfamfunc[tmp_genfunc]+1,
no = 1)
# Incrementing number of occurence of current function in gene family by 1 (setting to 1 if never seen)
}
tmp_gene <- ifelse(length(genfamfunc) > 0, names(genfamfunc[which(genfamfunc==max(genfamfunc))]), NA)
# If there was no function, returning NA, otherwise returning most frequent function
out_table <- rbind(out_table,tmp_gene)  # Adding most frequent function in gene family to output table
}
close(con)  # Closing file connection
out_table
out_name <- strsplit(basename(filepath),".")[[1]][1]  # Extracting input file group (B, BH, BHO, H, HO, O)
out_name
strsplit(basename(filepath),".",fixed=T)[[1]][1]  # Extracting input file group (B, BH, BHO, H, HO, O)
out_name <- strsplit(basename(filepath),".",fixed=T)[[1]][1]  # Extracting input file group (B, BH, BHO, H, HO, O)
out_table <- out_table[!is.na(out_table$annotation),]  # Removing first row containing NAs (used to initiate dataframe)
write.table(paste0('./data/annotations/',out_name,'_annotations.txt'),out_table)
paste0('./data/annotations/',out_name,'_annotations.txt')
out_table
write(paste0('./data/annotations/',out_name,'_annotations.txt'),out_table)
write.table(file = paste0('./data/annotations/',out_name,'_annotations.txt'),out_table)
write.table(file = paste0('../data/annotations/',out_name,'_annotations.txt'),out_table)
write.table(file = paste0('./data/annotations/',out_name,'_annotations.txt'),out_table,col.names = F,row.names = F,quote = F)
write.table(file = paste0('../data/annotations/',out_name,'_annotations.txt'),out_table,col.names = F,row.names = F,quote = F)
unique(c(1,2,3,3))
unique(c(1,2,3,3))
filepath <- "../data/gene_sets/BH_core_set.txt"
annotable <- read.table("../data/all_strains_annot.tsv",header=T)  #Loading annotation table
con  <- file(filepath, open = "r")  # Opening connection to input file
out_table <- data.frame(annotation=NA)  # initiating annotation table
while (length(oneLine <- readLines(con, n = 1,encoding = 'UTF-8', warn = FALSE)) > 0) {
# Reading input file line by line
gene_fam <- unlist(strsplit(oneLine, "\t"))  # Splitting gene family (line) into strain|gene doublets
genfamfunc <- c()  # (Re)initializing list of functions found in the gene family
for(d in gene_fam){
# Iterating over strain|gene doublets
gene <- strsplit(d, split = "|",fixed = T)[[1]][2]
# Excluding strain name
gene <- paste('fig',gene,sep='|')
# Appending 'fig|' at the begining of the gene name to match annotation table format
tmp_genfunc <- as.character(annotable$function.[annotable$feature_id==gene])
# extracting function of corresponding gene in annotation table
genfamfunc[tmp_genfunc] <- ifelse(test = is.numeric(genfamfunc[tmp_genfunc]),
yes = genfamfunc[tmp_genfunc]+1,
no = 1)
# Incrementing number of occurence of current function in gene family by 1 (setting to 1 if never seen)
}
tmp_gene <- ifelse(length(genfamfunc) > 0, names(genfamfunc[which(genfamfunc==max(genfamfunc))]), NA)
# If there was no function, returning NA, otherwise returning most frequent function
out_table <- rbind(out_table,tmp_gene)  # Adding most frequent function in gene family to output table
}
close(con)  # Closing file connection
out_name <- strsplit(basename(filepath),".",fixed=T)[[1]][1]  # Extracting input file group (B, BH, BHO, H, HO, O)
out_table[!is.na(out_table$annotation),]
out_table <- out_table[!is.na(out_table$annotation),]  # Removing first row containing NAs (used to initiate dataframe)
print(paste0("Wrote annotation file for ",out_name,". Contained ",length(out_table),
" annotated gene families. Found ",length(unique(out_name)),  " unique functions."))
filepath <- "../data/gene_sets/BH_genes.txt"
annotable <- read.table("../data/all_strains_annot.tsv",header=T)  #Loading annotation table
con  <- file(filepath, open = "r")  # Opening connection to input file
out_table <- data.frame(annotation=NA)  # initiating annotation table
while (length(oneLine <- readLines(con, n = 1,encoding = 'UTF-8', warn = FALSE)) > 0) {
# Reading input file line by line
gene_fam <- unlist(strsplit(oneLine, "\t"))  # Splitting gene family (line) into strain|gene doublets
genfamfunc <- c()  # (Re)initializing list of functions found in the gene family
for(d in gene_fam){
# Iterating over strain|gene doublets
gene <- strsplit(d, split = "|",fixed = T)[[1]][2]
# Excluding strain name
gene <- paste('fig',gene,sep='|')
# Appending 'fig|' at the begining of the gene name to match annotation table format
tmp_genfunc <- as.character(annotable$function.[annotable$feature_id==gene])
# extracting function of corresponding gene in annotation table
genfamfunc[tmp_genfunc] <- ifelse(test = is.numeric(genfamfunc[tmp_genfunc]),
yes = genfamfunc[tmp_genfunc]+1,
no = 1)
# Incrementing number of occurence of current function in gene family by 1 (setting to 1 if never seen)
}
tmp_gene <- ifelse(length(genfamfunc) > 0, names(genfamfunc[which(genfamfunc==max(genfamfunc))]), NA)
# If there was no function, returning NA, otherwise returning most frequent function
out_table <- rbind(out_table,tmp_gene)  # Adding most frequent function in gene family to output table
}
close(con)  # Closing file connection
out_name <- strsplit(basename(filepath),".",fixed=T)[[1]][1]  # Extracting input file group (B, BH, BHO, H, HO, O)
out_table[!is.na(out_table$annotation),]
out_table <- out_table[!is.na(out_table$annotation),]  # Removing first row containing NAs (used to initiate dataframe)
print(paste0("Wrote annotation file for ",out_name,". Contained ",length(out_table),
" annotated gene families. Found ",length(unique(out_name)),  " unique functions."))
print(paste0("Wrote annotation file for ",out_name,". Contained ",length(out_table),
" annotated gene families. Found ",length(unique(out_table)),  " unique functions."))
